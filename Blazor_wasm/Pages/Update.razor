 @page "/update"


@using Newtonsoft.Json
@using System.Drawing
@inject IAppService AppService;
@inject IStringLocalizer<MyStrings> localizer
@inject IJSRuntime JS
@inject AlertMessages alertMsgs
@inject PageTitleService pageTitleService
@implements IDisposable

<div class="container">
    <EditForm Model="@updateModel" OnValidSubmit="Submit">
        <h3 class="text-center">@localizer[StringDescriptionModel.account_modify_account]</h3><br />


        <DataAnnotationsValidator />

        <div class="mb-2 text-center ">
            <img src="@_userAvatar" @onclick="DisplayAction" height="80" width="80" class="rounded-circle avatar_container" />
        </div>


        <div class="form-group">
            <label>@localizer[StringDescriptionModel.account_first_name]</label>
            <input class="form-control" @bind-value="@updateModel.FirstName" placeholder=@localizer[StringDescriptionModel.account_ent_first_name]>
            <ValidationMessage For="@(()=> updateModel.FirstName)" />
        </div>


        <div class="form-group">
            <label>@localizer[StringDescriptionModel.account_last_name]</label>
            <input class="form-control" @bind-value="@updateModel.LastName" placeholder=@localizer[StringDescriptionModel.account_ent_last_name]>
            <ValidationMessage For="@(()=> updateModel.LastName)" />
            @* <input type="checkbox" checked="@adminChecked" @bind-value="@updateModel.Role" @onclick="@(()=> {toggleRole = !toggleRole;if(toggleRole)updateModel.Role = "Admin";else updateModel.Role = "User";})" />
        <label class="form-check-label" >
            Admin
        </label> *@
        </div>


        @* <div class="mt-2 form-group">
        <label>Gender</label>
        <div class="d-flex flex-row">
            <div class="d-flex gap-2">
                <div class="form-check">
                    <input @onchange="@(()=>updateModel.Gender = "male")" checked="@maleChecked" class="form-check-input" type="radio" name="flexRadioDefault" />
                    <label class="form-check-label" for="flexRadioDefault1">
                        Male
                    </label>
                </div>
                <div class="form-check">
                    <input @onchange="@(()=>updateModel.Gender = "female")" checked="@femaleChecked" class="form-check-input" type="radio" name="flexRadioDefault" />
                    <label class="form-check-label" for="flexRadioDefault2">
                        Female
                    </label>
                </div>
            </div>
        </div>
        <ValidationMessage For="@(()=> updateModel.Gender)" />
    </div> *@


        <div class="form-group">
            <label>@localizer[StringDescriptionModel.account_email_address]</label>
            <input readonly="true" type="email" @bind-value="@updateModel.Email" class="form-control" placeholder=@localizer[StringDescriptionModel.account_ent_email_address]>
            <ValidationMessage For="@(()=> updateModel.Email)" />
        </div>


        @if (displayPasswordInputField)
        {
            <div class="form-group">
                <label>@localizer[StringDescriptionModel.account_old_password]</label>
                <input type="password" @bind-value="@updateModel.OldPassword" class="form-control" placeholder=@localizer[StringDescriptionModel.account_ent_old_password]>
                <ValidationMessage For="@(()=> updateModel.OldPassword)" />
            </div>


            <div class="mt-2 form-group">
                <label>@localizer[StringDescriptionModel.account_new_password]</label>
                <input type="password" @bind-value="@updateModel.NewPassword" class="form-control" placeholder=@localizer[StringDescriptionModel.account_ent_new_password]>
                <ValidationMessage For="@(()=> updateModel.NewPassword)" />
            </div>


            <div class="mt-2 form-group">
                <label>@localizer[StringDescriptionModel.account_password_again]</label>
                <input type="password" @bind-value="@updateModel.ConfirmPassword" class="form-control" placeholder=@localizer[StringDescriptionModel.account_ent_password]>
                <ValidationMessage For="@(()=> updateModel.ConfirmPassword)" />
            </div>
        }


        <div class="mt-2 flex-column">
            <div class="flex justify-content-between">
                <button type="button" class="btn btn-secondary" @onclick="() => displayPasswordInputField = !displayPasswordInputField">
                    @localizer[displayPasswordInputField ? StringDescriptionModel.btn_collapse : StringDescriptionModel.btn_expand]
                </button>


                @if (!displayPasswordInputField)
                {
                    <p class="text-muted" style="font-size: 0.8rem;">@localizer[StringDescriptionModel.lab_change_password]</p>
                }
            </div>


            <button class="btn btn-primary w-100 mt-2" type="submit">
                <span class="@_spinnerClass" role="status" aria-hidden="true"></span>
                @localizer[StringDescriptionModel.btn_goto_modify]
            </button>
        </div>
    </EditForm>
</div>

@if (fetchData == true)
{
    <Loading IsLoading="fetchData" LoadingText="@localizer[StringDescriptionModel.loading]" />
}

@code {
    UpdateModel updateModel = new();
    private string _spinnerClass = "";
    private string _imageBase64Data;
    private bool toggleRole;
    private bool fetchData = false;

    private string _userAvatar { get; set; } = "images/user.png";
    // private string maleChecked { get; set; }
    // private string femaleChecked { get; set; }
    // private string adminChecked{ get; set; }


    private bool displayPasswordInputField = false;

    protected override async Task OnInitializedAsync()
    {
        pageTitleService.Title = "update";

        //    MainLayout.OnLanguageChange += StateHasChanged;
        await GetUser();
    }

    private async Task GetUser()
    {
        var result = await AppService.GetUser();
        updateModel = result.Content;
        // maleChecked = updateModel.Gender == "male" ? "checked" : "";
        // femaleChecked = updateModel.Gender == "female" ? "checked" : "";
        // adminChecked = updateModel.Role == "Admin" ? "checked" : null;
        // toggleRole = updateModel.Role == "Admin" ? true : false;
    }


    private async void Submit()
    {
        fetchData = true;
        _spinnerClass = "spinner-border spinner-border-sm";

        if (!string.IsNullOrWhiteSpace(_imageBase64Data))
        {
            updateModel.UserAvatar = _imageBase64Data;
        }

        var result = await AppService.UpdateUser(updateModel);
        fetchData = false;
        if (result.IsSuccess)
            await JS.InvokeVoidAsync("alertMessage", $"{localizer[StringDescriptionModel.account_update_success]}");
        else
            await JS.InvokeVoidAsync("alertMessage", alertMsgs.ErrorAlert(pageTitleService.Title, result).Result);

        _spinnerClass = "";
        this.StateHasChanged();
    }


    private async void DisplayAction()
    {
        // string response = await App.Current.MainPage.DisplayActionSheet("Select Option", "OK", null, "Take Photo", "Add Photo");


        // if (response == "Take Photo")
        // {
        //     if (MediaPicker.Default.IsCaptureSupported)
        //     {
        //         var photo = await MediaPicker.Default.CapturePhotoAsync();
        //         if (photo != null)
        //         {
        //             byte[] imageBytes;
        //             var newFile = Path.Combine(FileSystem.CacheDirectory, photo.FileName);
        //             var stream = await photo.OpenReadAsync();


        //             using (MemoryStream ms = new MemoryStream())
        //             {
        //                 stream.CopyTo(ms);
        //                 imageBytes = ms.ToArray();
        //             }
        //             _imageBase64Data = Convert.ToBase64String(imageBytes);
        //             _userAvatar = string.Format("data:image/png;base64,{0}", _imageBase64Data);
        //             this.StateHasChanged();
        //         }
        //     }
        // }
        // else if (response == "Add Photo")
        // {
        //     var photo = await MediaPicker.Default.PickPhotoAsync();
        //     if (photo != null)
        //     {
        //         byte[] imageBytes;
        //         var newFile = Path.Combine(FileSystem.CacheDirectory, photo.FileName);
        //         var stream = await photo.OpenReadAsync();


        //         using (MemoryStream ms = new MemoryStream())
        //         {
        //             stream.CopyTo(ms);
        //             imageBytes = ms.ToArray();
        //         }
        //         _imageBase64Data = Convert.ToBase64String(imageBytes);
        //         _userAvatar = string.Format("data:image/png;base64,{0}", _imageBase64Data);
        //         this.StateHasChanged();
        //     }
        // }
    }
    void IDisposable.Dispose()
    {
     //   MainLayout.OnLanguageChange -= StateHasChanged;
    }
}





