@page "/alarmDataGrid"

@using CsvHelper
@using CsvHelper.Configuration

@using Syncfusion.Blazor.Grids

@inject IJSRuntime JS
@inject AlertMessages alertMsgs
@inject PageTitleService pageTitleService
@inject IDataService dataService
@inject DevicesDataModel devicesDataModel
@inject GetAllCalData getAllCalData
@inject IStringLocalizer<MyStrings> localizer
@implements IDisposable

<div class="col-lg-12 control-section">
    @*    <div class="card mb-2">
        <div class="card-body d-flex flex-row">
            <button class="btn btn-primary" @onclick="DeleteAlarmData"></button>
        </div>
    </div> *@

    <div class="col-lg-12 control-section" style="width: 100%; height: 100%;">
        <div class="content-wrapper">
            <div class="row">
                <SfTreeGrid DataSource="@TreeGridData" IdMapping="Id" ParentIdMapping="ParentID" TreeColumnIndex="1" AllowPaging="true" AllowResizing="true">
                    <TreeGridPageSettings PageSize="5"></TreeGridPageSettings>
                    <TreeGridColumns>
                        @* <TreeGridColumn Field="Id" HeaderText="Id" Width="80" MinWidth="8" TextAlign="TextAlign.Right"></TreeGridColumn> *@
                        <TreeGridColumn Field="DateTime" HeaderText="DateTime" MinWidth="80" Width="120" ></TreeGridColumn>
                        <TreeGridColumn Field="AlarmContent" HeaderText="Content" Format="d" MinWidth="50" Width="230" TextAlign="TextAlign.Right">
                            <Template>
                                @{
                                    var alarmData = (context as AlarmSelfReferenceData);
                                    if (alarmData.AlarmContent.Contains("System"))
                                    {
                                        var prefix = alarmData.AlarmContent.Contains("#") ? alarmData.AlarmContent.Substring(0, 2) : null;
                                        <div style="color:black; font:bold">
                                            <span class="statustxt">@prefix@localizer[AlarmDescriptionModel.CollectionOfSystemAlarm1[alarmData.AlarmNumber]]</span>
                                        </div>
                                    }
                                    else if (alarmData.AlarmContent.Contains("Driver"))
                                    {
                                        var prefix = alarmData.AlarmContent.Contains("#") ? alarmData.AlarmContent.Substring(0, 2) : null;
                                        <div style="color:black; font:bold">
                                            <span class="statustxt">@prefix@localizer[AlarmDescriptionModel.CollectionOfDriverAlarm[alarmData.AlarmNumber]]</span>
                                        </div>
                                    }
                                    else
                                    {
                                        <div style="color:black; font:bold">
                                            <span class="statustxt">@localizer[AlarmDescriptionModel.CollectionOfCommonAlarm[alarmData.AlarmNumber]]</span>
                                        </div>
                                    }
                                }
                            </Template>
                        </TreeGridColumn>
                        <TreeGridColumn Field="AlarmStatus" HeaderText="Status" MinWidth="8" Width="70" TextAlign="TextAlign.Right">
                            <Template>
                                @{
                                    var alarmData = (context as AlarmSelfReferenceData);
                                    if (alarmData.AlarmStatus == "警報中")
                                    {
                                        <div style="color:red; font:bold">
                                            <span class="statustxt lowgdp">@localizer[StringDescriptionModel.alarm_active]</span>
                                        </div>
                                    }
                                    if (alarmData.AlarmStatus == "已解除")
                                    {
                                        <div style="color:green" font:bold>
                                            <span class="statustxt ">@localizer[StringDescriptionModel.alarm_inactive]</span>
                                        </div>
                                    }
                                }
                            </Template>
                        </TreeGridColumn>
                    </TreeGridColumns>
                </SfTreeGrid>
            </div>
        </div>
    </div>
</div>

@code {
    public List<AlarmSelfReferenceData>? TreeGridData { get; set; }
    private List<AlarmDataModel>? alarmData, inAlarmData;

    public void ToChangeAlarmBtnState() => toChangeAlarmBtnState?.Invoke();
    public static event System.Action? toChangeAlarmBtnState;

    protected override async Task OnInitializedAsync()
    {
		pageTitleService.Title = "AlarmDataGrid";
        //   MainLayout.OnLanguageChange += StateHasChanged;
        devicesDataModel.OnAlarmStateChange += UpdateRelay;
        Blazor_wasm.Pages.Index.showHistoryAlarmData += UpdateRelay;
        Blazor_wasm.Pages.Index.toDeleteAlarmData += DeleteAlarmData;

        Update(true, Blazor_wasm.Pages.Index.filterDevicesNumber);
        Blazor_wasm.Pages.Index.historyAlarmActive = true; 
    }

    private void UpdateRelay(bool historyAlarmActive, bool filterDevicesNubmer)
    {
        Update(historyAlarmActive, filterDevicesNubmer);
    }

    private async void Update(bool historyAlarmActive, bool filterDevicesNumber)
    {
        var result = await dataService.GetAllAlarm();
        alarmData = result.Content as List<AlarmDataModel>;
        // if (!result.IsSuccess)
        //     await JS.InvokeVoidAsync("alertMessage", alertMsgs.ErrorAlert(pageTitleService.Title, result).Result);


        inAlarmData = alarmData?.Where(x => x.AlarmStatus == "警報中").ToList();

        await Task.Delay(500);
        if (alarmData != null)
        {           
            Blazor_wasm.Pages.Index.historyAlarmActive = historyAlarmActive ? true : false;
            TreeGridData = historyAlarmActive ? AlarmSelfReferenceData.GetTree(alarmData).ToList() : AlarmSelfReferenceData.GetTree(inAlarmData).ToList();
            TreeGridData.Sort((a, b) => b.DateTime.CompareTo(a.DateTime));

            TreeGridData = !filterDevicesNumber ? TreeGridData.Where(item => item.AlarmContent.Contains("#1") || !item.AlarmContent.Contains("#")).ToList() : 
            TreeGridData.Where(item => item.AlarmContent.Contains("#2") || !item.AlarmContent.Contains("#")).ToList();
        }
        StateHasChanged();
        ToChangeAlarmBtnState();
    }

    private async void DeleteAlarmData()
    {
        await dataService.DeleteAlarmData();
        TreeGridData = new List<AlarmSelfReferenceData>();
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
     //   MainLayout.OnLanguageChange -= StateHasChanged;
        devicesDataModel.OnAlarmStateChange -= UpdateRelay;
        Blazor_wasm.Pages.Index.showHistoryAlarmData -= UpdateRelay;
        Blazor_wasm.Pages.Index.toDeleteAlarmData -= DeleteAlarmData;
    }   
}

