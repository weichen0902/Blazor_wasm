@using Syncfusion.Blazor.CircularGauge
@using Syncfusion.Blazor.DropDowns

@inject DevicesDataModel devicesDataModel
@inject IDataService dataService
@inject GetAllCalData getAllCalData
@inject IStringLocalizer<MyStrings> localizer
@implements IDisposable

@* <input type="text" @bind-value="MainLayout.endurancePercentage[0]1"/> *@
<CircularGaugeAxes>
    <CircularGaugeAxis StartAngle="220" EndAngle="140" Radius="90%" Minimum="0" Maximum="100">
        <CircularGaugeAxisLineStyle Width="0" />
        <CircularGaugeAxisLabelStyle Position="Syncfusion.Blazor.CircularGauge.Position.Outside" Offset="-5" AutoAngle="true">
            <CircularGaugeAxisLabelFont Size="0px" FontFamily="inherit" />
        </CircularGaugeAxisLabelStyle>
        <CircularGaugeAxisMajorTicks Height="0" />
        <CircularGaugeAxisMinorTicks Height="0" />
        <CircularGaugePointers>
            @for (int i = 0; i < MainLayout.endurancePercentage[0]; i++)
            {
                if (MainLayout.endurancePercentage[0] >= 0 && MainLayout.endurancePercentage[0] < 50)
                {
                    <CircularGaugePointer Value="@i" Color="@redToOrange[i]" Radius="80%"
                    MarkerWidth="38" MarkerHeight="3"
                    Type="PointerType.Marker" MarkerShape="GaugeShape.Rectangle">
                        <CircularGaugePointerAnimation Enable="false"></CircularGaugePointerAnimation>
                    </CircularGaugePointer>
                }
                else if (MainLayout.endurancePercentage[0] >= 50 && MainLayout.endurancePercentage[0] < 60)
                {
                    <CircularGaugePointer Value="@i" Color="@orangeToGreen[i]" Radius="80%"
                    MarkerWidth="38" MarkerHeight="3"
                    Type="PointerType.Marker" MarkerShape="GaugeShape.Rectangle">
                        <CircularGaugePointerAnimation Enable="false"></CircularGaugePointerAnimation>
                    </CircularGaugePointer>
                }
                else if (MainLayout.endurancePercentage[0] >= 60 && MainLayout.endurancePercentage[0] < 80)
                {
                    <CircularGaugePointer Value="@i" Color="@greenToBlue[i]" Radius="80%"
                    MarkerWidth="38" MarkerHeight="3"
                    Type="PointerType.Marker" MarkerShape="GaugeShape.Rectangle">
                        <CircularGaugePointerAnimation Enable="false"></CircularGaugePointerAnimation>
                    </CircularGaugePointer>
                }
                else
                {
                    <CircularGaugePointer Value="@i" Color="@blueToPurple[i]" Radius="80%"
                    MarkerWidth="38" MarkerHeight="3"
                    Type="PointerType.Marker" MarkerShape="GaugeShape.Rectangle">
                        <CircularGaugePointerAnimation Enable="false"></CircularGaugePointerAnimation>
                    </CircularGaugePointer>
                }

            }
        </CircularGaugePointers>
        <CircularGaugeRanges>
            <CircularGaugeRange Start="0" End="100" StartWidth="38" EndWidth="38" Color="#f6f7f9" Radius="98%"></CircularGaugeRange>
        </CircularGaugeRanges>
        <CircularGaugeAnnotations>           
            <CircularGaugeAnnotation Angle="@GaugeSixAngle" ZIndex="1" Radius="@GaugeSixRadius">
                <ContentTemplate>
                    <div class="gaugeSixFirstText" style="font-size:20px;">@MainLayout.endurancePercentage[0] % <br /> <div style="font-family:inherit"> @localizer[StringDescriptionModel.dashboard_endurance] </div> </div>
                </ContentTemplate>
            </CircularGaugeAnnotation>           
        </CircularGaugeAnnotations>
    </CircularGaugeAxis>
</CircularGaugeAxes>

@code {
    public double GaugeSixAngle = 76;
    public string GaugeSixRadius = "10%";

    public void NotifyMaintainMsg(string str, double value) => onMaintainMsg?.Invoke(str, value);
    public static event Action<string, double>? onMaintainMsg;

    protected override async void OnInitialized()
    {
        MainLayout.OnFieldInputChange += PublishMaintainMsg;
        devicesDataModel.OnCalStateChange += PublishMaintainMsg;
        Blazor_wasm.Pages.Index.onMaintain1Msg += PublishMaintainMsg;
    }

    public void PublishMaintainMsg()
    {
        StateHasChanged();

        if (MainLayout.endurancePercentage[0] <= 100 && MainLayout.endurancePercentage[0] > 80)
        {
            NotifyMaintainMsg($"{localizer[StringDescriptionModel.dialog_electrode1]}_{localizer[StringDescriptionModel.dashboard_endurance]} {MainLayout.endurancePercentage[0]}%, {localizer[StringDescriptionModel.dialog_maintain80]}", MainLayout.endurancePercentage[0]);
        }
        else if (MainLayout.endurancePercentage[0] <= 80 && MainLayout.endurancePercentage[0] > 60)
        {
            NotifyMaintainMsg($"{localizer[StringDescriptionModel.dialog_electrode1]}_{localizer[StringDescriptionModel.dashboard_endurance]} {MainLayout.endurancePercentage[0]}%, {localizer[StringDescriptionModel.dialog_maintain70]}", MainLayout.endurancePercentage[0]);             
            
        }
        else if (MainLayout.endurancePercentage[0] <= 60 && MainLayout.endurancePercentage[0] > 50)
        {
            NotifyMaintainMsg($"{localizer[StringDescriptionModel.dialog_electrode1]}_{localizer[StringDescriptionModel.dashboard_endurance]} {MainLayout.endurancePercentage[0]}%, {localizer[StringDescriptionModel.dialog_maintain60]}", MainLayout.endurancePercentage[0]);
        }
        else
        {
            NotifyMaintainMsg($"{localizer[StringDescriptionModel.dialog_electrode1]}_{localizer[StringDescriptionModel.dashboard_endurance]} {MainLayout.endurancePercentage[0]}%, {localizer[StringDescriptionModel.dialog_maintain30]}", MainLayout.endurancePercentage[0]);
        }
	}

    void IDisposable.Dispose()
    {
        MainLayout.OnFieldInputChange -= PublishMaintainMsg;
        devicesDataModel.OnCalStateChange -= PublishMaintainMsg;
        Blazor_wasm.Pages.Index.onMaintain1Msg -= PublishMaintainMsg;
    }
}