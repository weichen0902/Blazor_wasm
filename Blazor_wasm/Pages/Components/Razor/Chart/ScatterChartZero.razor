@inject DevicesDataModel devicesDataModel
@inject GetAllCalData getAllCalData
@inject NavigationManager NavigationManager

<SfChart id="container" Width="@Width" Theme="@Theme">
    <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" Minimum="getAllCALData.minimumDateTime" Maximum="getAllCALData.maximumDateTime">
        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
    </ChartPrimaryXAxis>
    <ChartPrimaryYAxis Minimum="-60" Maximum="60" Interval="10" Title="Zero Value" RangePadding="ChartRangePadding.None">
        <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
    </ChartPrimaryYAxis>
    <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
    <ChartLegendSettings Visible="true" EnableHighlight="true"></ChartLegendSettings>
    <ChartSeriesCollection>
        <ChartSeries DataSource="@hbm1ZeroValue" Name="HBM-100D-1" XName="dateTime" Width="2"
                     YName="zeroValue" Type="ChartSeriesType.Scatter" Fill="#FF5151">
            <ChartMarker Height="10" Width="10" Shape="ChartShape.Circle" >
            </ChartMarker>
        </ChartSeries>
        <ChartSeries DataSource="@hbm2ZeroValue" Name="HBM-100D-2" XName="dateTime"
                     YName="zeroValue" Type="ChartSeriesType.Scatter" Fill="#0080FF">
            <ChartMarker Height="10" Width="10" Shape="ChartShape.Circle" >
            </ChartMarker>
        </ChartSeries>
    </ChartSeriesCollection>
</SfChart>

@code {
    private Syncfusion.Blazor.Theme Theme { get; set; }
    public string Width { get; set; } = "100%";

    public List<ZeroValue> hbm1ZeroValue { get; set; } = new List<ZeroValue>();
    public List<ZeroValue> hbm2ZeroValue { get; set; } = new List<ZeroValue>();

    public class ZeroValue
    {
        public DateTime dateTime { get; set; }
        public double zeroValue { get; set; }
    }

    protected override void OnInitialized()
    {      
        MainLayout.OnLanguageChange += StateHasChanged;
        devicesDataModel.OnCalStateChange += Update;       
        Update();
    } 

    private void Update()
    {
        if (getAllCalData.d1CalData.Count > 0)
        {
            foreach (var _d1CalData in getAllCalData.d1CalData)
            {
                hbm1ZeroValue.Add
                (
                    new ZeroValue()
                        {
                            dateTime = _d1CalData.DateTime,
                            zeroValue = _d1CalData.Zero,
                        }
                );
            }
        }
        else
        {
            hbm1ZeroValue.Add
                (
                    new ZeroValue()
                        {
                            dateTime = DateTime.Now,
                            zeroValue = 0,
                        }
                );
        }

        if (getAllCalData.d2CalData.Count > 0)
        {
            foreach (var _d2CalData in getAllCalData.d2CalData)
            {
                hbm2ZeroValue.Add
                (
                    new ZeroValue()
                        {
                            dateTime = _d2CalData.DateTime,
                            zeroValue = _d2CalData.Zero,
                        }
                );
            }
        }
        else
        {
            hbm2ZeroValue.Add
                (
                    new ZeroValue()
                        {
                            dateTime = DateTime.Now,
                            zeroValue = 0,
                        }
                );
        }
        StateHasChanged();
    }
}
