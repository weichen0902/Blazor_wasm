@page "/streamingChart"


@using Microsoft.JSInterop
@inject IJSRuntime JS
@inject PageTitleService pageTitleService
@inject AlertMessages alertMsgs
@inject IDataService dataService
@inject DevicesDataModel devicesDataModel


<canvas id="myChart" width="700" height="330"></canvas>


@code {
    private bool isPaused = false;
    private long dateTimeStartUnixTimeStamp, dateTimeEndUnixTimeStamp;
    private static List<RealTimepHModel>? realTimepHList = new List<RealTimepHModel>();

    public class YValueResult
    {
        public bool ElecError { get; set; }
        public double YValue { get; set; }
    }

    protected override void OnInitialized()
    {
        //    MainLayout.OnLanguageChange += StateHasChanged;
        pageTitleService.Title = "streamingChart";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        dateTimeEndUnixTimeStamp = (long)(DateTime.Now.ToUniversalTime() - new DateTime(1970, 1, 1)).TotalSeconds;
        dateTimeStartUnixTimeStamp = dateTimeEndUnixTimeStamp - 1800;

        var result = await dataService.GetpH(dateTimeStartUnixTimeStamp, dateTimeEndUnixTimeStamp);
        realTimepHList = result.Content as List<RealTimepHModel>;
        // if (result.IsSuccess == false)
        //     await JS.InvokeVoidAsync("alertMessage", alertMsgs.ErrorAlert(pageTitleService.Title, result).Result);

        if (firstRender)
        {
            await JS.InvokeVoidAsync("createStreamingChart", "myChart", realTimepHList);
        }
    }

    [JSInvokable]
    public static async Task<List<RealTimepHModel>> GetHistoricalDataAsync()
    {
        return await Task.FromResult(realTimepHList);
    }

    [JSInvokable]
    public static async Task<YValueResult> GetY1ValueAsync()
    {
        var elecError = MainLayout.elecError[0] ? true : false;
        var yValue = MainLayout.d1pH;     
        return await Task.FromResult(new YValueResult
        {
                ElecError = elecError,
                YValue = yValue
        });
    }

    [JSInvokable]
    public static async Task<YValueResult> GetY2ValueAsync()
    {
        var elecError = MainLayout.elecError[1] ? true : false;
        var yValue = MainLayout.d2pH;
        return await Task.FromResult(new YValueResult
            {
                ElecError = elecError,
                YValue = yValue
            });
    }
}







