@page "/dashboard"

@using Syncfusion.Blazor.CircularGauge
@using Syncfusion.Blazor.Layouts
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Navigations
@using Microsoft.AspNetCore.Components.Authorization

@inject IJSRuntime jsRuntime
@inject IDataService dataService
@inject DevicesDataModel devicesDataModel
@inject PageTitleService pageTitleService
@inject GetAllCalData getAllCalData
@inject GetSchedule getSchedule
@inject AuthenticationStateProvider authStateProvider
@inject IStringLocalizer<MyStrings> localizer
@inject NavigationManager NavManager;
@implements IDisposable

<SfDashboardLayout ID="DashBoard" @ref="DashboardLayout" AllowDragging="false" AllowResizing="false" AllowFloating="true" CellSpacing="@CellSpacing" Columns="30">
    <DashboardLayoutEvents Created="Created" ></DashboardLayoutEvents>
    
    <DashboardLayoutPanels>
        <DashboardLayoutPanel Id="LayoutFive" Row="0" Col="14" SizeX="15" SizeY="8">
            <HeaderTemplate>
                <div>
                    @localizer[StringDescriptionModel.dashboard_pH_live_chart]
                    @* <div style="display:flex; text-align:center; align-items:center; position:absolute; top:5px; right:5px;">
                        <button class="btn btn-primary" style="padding:0 5px 0 5px; " @onclick="@(async()=> await dataService.DeletepH())">@localizer[StringDescriptionModel.dashboard_clear]</button>
                    </div> *@
                </div>
            </HeaderTemplate>
            <ContentTemplate>
                @if (IsInitialRender)
                {
                    <LiveChart></LiveChart>
                }
            </ContentTemplate>
        </DashboardLayoutPanel>
       
    </DashboardLayoutPanels>
</SfDashboardLayout>


@code {
    SfCircularGauge GaugeOne;
    SfCircularGauge GaugeTwo;
    SfCircularGauge GaugeThree;
    SfCircularGauge GaugeFour;
    SfDashboardLayout DashboardLayout;

    private Modal modalRef1;
    private Modal modalRef2;

    private string[] d1ButtonColor { get; set; } = new string[4];
    private string[] d2ButtonColor { get; set; } = new string[4];

    public static List<SchedulerModel>? dataSource { get; set; }

    public static bool historyAlarmActive = false;

    public void ToDeleteAlarmData() => toDeleteAlarmData?.Invoke();
    public static event Action? toDeleteAlarmData;

    public void ShowHistoryAlarmData(bool a) => showHistoryAlarmData?.Invoke(a);
    public static event Action<bool>? showHistoryAlarmData;

    public void NotifyMaintain1Msg() => onMaintain1Msg?.Invoke();
    public static event Action? onMaintain1Msg;

    public void NotifyMaintain2Msg() => onMaintain2Msg?.Invoke();
    public static event Action? onMaintain2Msg;

    private bool ScatterChartChange { get; set; } = false;

    public bool IsInitialRender { get; set; }
    public double[] CellSpacing = { 10, 10 };

    Timer timer = null;

    private bool Expand = false;

    public ElementReference WeekdayElementRef;
    string selectedStep = "step1";

    public static bool waitFeedback;
    public static bool[] d1ToggleInput = new bool[5];
    public static bool[] d2ToggleInput = new bool[5];

    private static int d1ValveValue, d2ValveValue;

    private int[] hoisterDownCycleSettingCount = new int[2];
    private int[] hoisterDownCycleCount = new int[2];

    private static DateTime startDate = new DateTime(2025, 2, 1);

    private (string Label, string Key)[] HbmReadings = new[]
    {
        ("pH", "hbmpH"),
        ("Elec", "hbmElec"),
        ("Temp", "hbmTemp"),
        ("Zero", "hbmZero"),
        ("Slope", "hbmSlope"),
        ("Health", "hbmHealth")
    };


    protected override async Task OnInitializedAsync()
    {
        pageTitleService.Title = "";
        MainLayout.OnLanguageChange += StateHasChanged;
        MainLayout.OnFieldChange += Update;
        devicesDataModel.OnStateChange += Update;
        AlarmDataGrid.toChangeAlarmBtnState += StateHasChanged;

        for (int i = 0; i < 1; i++)
        {
            hoisterDownCycleSettingCount[i] = (ushort)devicesDataModel[i, "hoisterDownCycleSettingCount"];
        }

        
       if (Setting.UserBasicDetail.Role == "Admin" || Setting.UserBasicDetail.Role == "User")
        {
            getAllCalData.UpdateData();
            await Task.Delay(500);
            getSchedule.UpdateData();
            await Task.Delay(500);
            Update();
        }

        
    }

    private async void Update()
    {
        for (int i = 0; i < 1; i++)
        {          
            hoisterDownCycleCount[i] = MainLayout.response.hoisterDownCycleCount[i];
        }

        StateHasChanged();
    }

    public async void Created(Object args)
    {
        IsInitialRender = true;
    }

    public async Task ResizingWindow(ResizeArgs args)
    {
        await Task.Delay(100);
        await DashboardLayout.RefreshAsync();
        await GaugeOne.RefreshAsync();
        await GaugeTwo.RefreshAsync();
        await GaugeThree.RefreshAsync();
        await GaugeFour.RefreshAsync();
    }

    public async Task ResizingHandler(ResizeArgs args)
    {
        if (args.Id == "LayoutOne")
        {
            await Task.Delay(100);
            GaugeOne.RefreshAsync();
        }
        else if (args.Id == "LayoutTwo")
        {
            await Task.Delay(100);
            GaugeTwo.RefreshAsync();
        }
        else if (args.Id == "LayoutThree")
        {
            await Task.Delay(100);
            GaugeThree.RefreshAsync();
        }
        else if (args.Id == "LayoutFour")
        {
            await Task.Delay(100);
            GaugeFour.RefreshAsync();
        }
    }

    private Task ShowModal1()
    {
        return modalRef1.Show();
    }

    private Task HideModal1()
    {
        return modalRef1.Hide();
    }

    private Task ShowModal2()
    {
        return modalRef2.Show();
    }

    private Task HideModal2()
    {
        return modalRef2.Hide();
    }

    public async Task ExpandHandler()
    {
        Expand = !Expand;
        await Task.Delay(2);

        if (Expand)
        {
            if (WeekdayElementRef.Id != null)
            {
                await jsRuntime.InvokeVoidAsync("setFocusToElement", WeekdayElementRef);
            }
        }
    }

    private Task OnSelectedStepChanged(string name)
    {
        selectedStep = name;

        return Task.CompletedTask;
    }

    private async Task UpdateNumber(ushort address, int value)
    {
        PostModbusApiModel postModbusApiModel = new PostModbusApiModel();

        postModbusApiModel.startAddress = address;
        postModbusApiModel.value = value;
        await dataService.PostModbusDevicesData(postModbusApiModel);
        return;
    }

    void IDisposable.Dispose()
    {
        MainLayout.OnLanguageChange -= StateHasChanged;
        MainLayout.OnFieldChange -= Update;
        devicesDataModel.OnStateChange -= Update;
        AlarmDataGrid.toChangeAlarmBtnState -= StateHasChanged;
    }
}
