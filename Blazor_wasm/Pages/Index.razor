@page "/dashboard"

@using Syncfusion.Blazor.CircularGauge
@using Syncfusion.Blazor.Layouts
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Navigations
@using Microsoft.AspNetCore.Components.Authorization

@inject IJSRuntime JS
@inject AlertMessages alertMsgs
@inject IDataService dataService
@inject DevicesDataModel devicesDataModel
@inject PageTitleService pageTitleService
@inject GetAllCalData getAllCalData
@inject GetSchedule getSchedule
@inject AuthenticationStateProvider authStateProvider
@inject IStringLocalizer<MyStrings> localizer
@inject NavigationManager NavManager;
@implements IDisposable

<SfDashboardLayout ID="DashBoard" @ref="DashboardLayout" AllowDragging="false" AllowResizing="false" AllowFloating="true" CellSpacing="@CellSpacing" Columns="30">
    <DashboardLayoutEvents Created="Created" ></DashboardLayoutEvents>

    <DashboardLayoutPanels>

        <DashboardLayoutPanel Id="LayoutOne" Row="0" Col="0" SizeX="7" SizeY="8">
            <HeaderTemplate>
                <div>
                    HBM-100D
                    <a style="margin-right:auto">#1</a>
                    <div style="display:flex; text-align:center; align-items:center; position:absolute; top:5px; right:5px; height:30px;">
                        <button class="btn btn-primary" style="padding:0 0 0 0; width:30px;" @onclick="ShowModal1">...</button>
                    </div>
                </div>
            </HeaderTemplate>
            <ContentTemplate>
                @if (IsInitialRender)
                {
                    <div style="height:100%; width:100%;">
                        <SfCircularGauge ID="GaugeOne" @ref="GaugeOne" Width="100%" Height="100%" MoveToCenter="true">
                            <CircularGauge1></CircularGauge1>
                        </SfCircularGauge>
                    </div>
                    @if (MainLayout.elecError[0])
                    {
                        <div class="centered-blinking-label blinking-label">
                            <label>@localizer[StringDescriptionModel.dashboard_elec_err]</label>
                        </div>
                    }                    
                }
            </ContentTemplate>
        </DashboardLayoutPanel>
        <DashboardLayoutPanel Id="LayoutTwo" Row="0" Col="7" SizeX="7" SizeY="8">
            <HeaderTemplate>
                <div>
                    HBM-100D
                    <a style="margin-right:auto">#2</a>
                    <div style="display:flex; text-align:center; align-items:center; position:absolute; top:5px; right:5px; height:30px;">
                        <button class="btn btn-primary" style="padding:0 0 0 0; width:30px;" @onclick="ShowModal2">...</button>
                    </div>
                </div>
            </HeaderTemplate>
            <ContentTemplate>
                @if (IsInitialRender)
                {
                    <div style="height:100%; width:100%;">
                        <SfCircularGauge ID="GaugeTwo" @ref="GaugeTwo" Width="100%" Height="100%" MoveToCenter="true">
                            <CircularGauge2></CircularGauge2>
                        </SfCircularGauge>
                    </div>
                    @if (MainLayout.elecError[1])
                    {
                        <div class="centered-blinking-label blinking-label">
                            <label>@localizer[StringDescriptionModel.dashboard_elec_err]</label>
                        </div>
                    }
                }
            </ContentTemplate>
        </DashboardLayoutPanel>

        <DashboardLayoutPanel Id="LayoutFive" Row="0" Col="14" SizeX="15" SizeY="8">
            <HeaderTemplate>
                <div>
                    @localizer[StringDescriptionModel.dashboard_pH_live_chart]
                    @* <div style="display:flex; text-align:center; align-items:center; position:absolute; top:5px; right:5px;">
                        <button class="btn btn-primary" style="padding:0 5px 0 5px; " @onclick="@(async()=> await dataService.DeletepH())">@localizer[StringDescriptionModel.dashboard_clear]</button>
                    </div> *@
                </div>
            </HeaderTemplate>
            <ContentTemplate>
                @if (IsInitialRender)
                {
                    <StreamingChart></StreamingChart>
                }
            </ContentTemplate>
        </DashboardLayoutPanel>
        <DashboardLayoutPanel Id="LayoutSix" Row="8" Col="14" SizeX="15" SizeY="8">
            <HeaderTemplate>
                <div>
                    @localizer[StringDescriptionModel.dashboard_alarm_datalog]
                    @* <div style="display:flex; text-align:center; align-items:center; position:absolute; top:5px; right:5px;">
                        <button class="btn btn-primary" style="padding:0 5px 0 5px; " @onclick="ToDeleteAlarmData">@localizer[StringDescriptionModel.dashboard_clear]</button>
                    </div>   *@    

                    <div style="display:flex; text-align:center; align-items:center; position:absolute; top:5px; right:10px; height:30px; gap: 10px;">
                        <button class="btn btn-primary" style="padding:0 5px 0 5px; " onclick="@(()=> {filterDevicesNumber = !filterDevicesNumber; ShowHistoryAlarmData(historyAlarmActive, filterDevicesNumber);})">@localizer[StringDescriptionModel.dashboard_filter_number]</button>

                        @{
                            if (historyAlarmActive)
                            {
                                <div style="display:flex; text-align:center; align-items:center; top:5px;  height:30px;">
                                    <button class="btn btn-primary"  onclick="@(()=> { ShowHistoryAlarmData(false, filterDevicesNumber); historyAlarmActive = false;})">@localizer[StringDescriptionModel.show_inalarm]</button>
                                </div>
                            }
                            else
                            {
                                <div style="display:flex; text-align:center; align-items:center; top:5px;  height:30px;">
                                    <button class="btn btn-primary"  onclick="@(()=> { ShowHistoryAlarmData(true, filterDevicesNumber); historyAlarmActive = true;})">@localizer[StringDescriptionModel.show_history_alarm]</button>
                                </div>
                            }
                        }
                    </div>                 
                </div>
            </HeaderTemplate>
            <ContentTemplate>
                @if (IsInitialRender)
                {
                    <AlarmDataGrid></AlarmDataGrid>
                }
            </ContentTemplate>
        </DashboardLayoutPanel>

        <DashboardLayoutPanel Id="LayoutSeven" Row="8" Col="0" SizeX="7" SizeY="8">
            <HeaderTemplate><div> @localizer[StringDescriptionModel.dashboard_elec_life] System#1 </div></HeaderTemplate>
            <ContentTemplate>

                @if (IsInitialRender && MainLayout.fieldData != null)
                {
                    <div style="
                        position: absolute;
                        top: 40px;
                        left: 10px;
                        font-size: calc(10px + 0.5vw);
                        color: #333;
                        white-space: nowrap;
                        z-index: 1000;
                    ">            
                        @MainLayout.fieldData.Field - 220                                      
                    </div>
                    <div style="width:100%; height:100%;" onmousedown="@(()=>NotifyMaintain1Msg())">
                        <SfCircularGauge ID="GaugeThree" @ref="GaugeThree" Width="100%" Height="100%" MoveToCenter="true">
                            <CircularGaugeLife1></CircularGaugeLife1>
                        </SfCircularGauge>
                    </div>
                    <div style="position: absolute;
                        bottom: 10px;
                        left: 50%;
                        transform: translateX(-50%);
                        font-size: calc(12px + 0.5vw);
                        color: #333;
                        white-space: nowrap;
                        z-index: 1000;">
                        @if (Setting.UserBasicDetail.Role == "Admin")
                        {
                            <div>
                                <label>@localizer[StringDescriptionModel.dashboard_remaindays]:</label>
                                <span>@MainLayout.actualRemainingDays[0]</span>
                            </div>
                        }
                        else
                        {                        
                            <div>
                                <label>@localizer[StringDescriptionModel.dashboard_remaindays]:</label>
                                <span>@MainLayout.actualRemainingDays[0]</span>
                            </div>
                        }
                    </div>
                }
            </ContentTemplate>
        </DashboardLayoutPanel>
        <DashboardLayoutPanel Id="LayoutEight" Row="8" Col="7" SizeX="7" SizeY="8">
            <HeaderTemplate><div> @localizer[StringDescriptionModel.dashboard_elec_life] System#2 </div></HeaderTemplate>
            <ContentTemplate>
                @if (IsInitialRender && MainLayout.fieldData != null)
                {
                    <div style="
                        position: absolute;
                        top: 40px;
                        left: 10px;
                        font-size: calc(10px + 0.5vw);
                        color: #333;
                        white-space: nowrap;
                        z-index: 1000;
                    ">
                        @MainLayout.fieldData.Field - 220
                    </div>
                    <div style="width:100%; height:100%;" onmousedown="@(()=>NotifyMaintain2Msg())">
                        <SfCircularGauge ID="GaugeFour" @ref="GaugeFour" Width="100%" Height="100%" MoveToCenter="true">
                            <CircularGaugeLife2></CircularGaugeLife2>
                        </SfCircularGauge>
                    </div>
                    <div style="position: absolute;
                        bottom: 10px;
                        left: 50%;
                        transform: translateX(-50%);
                        font-size: calc(12px + 0.5vw);
                        color: #333;
                        white-space: nowrap;
                        z-index: 1000;">
                        @if (Setting.UserBasicDetail.Role == "Admin")
                        {
                            <div>
                                <label>@localizer[StringDescriptionModel.dashboard_remaindays]:</label>
                                <span>@MainLayout.actualRemainingDays[1]</span>
                            </div>
                        }
                        else
                        {
                            <div>
                                <label>@localizer[StringDescriptionModel.dashboard_remaindays]:</label>
                                <span>@MainLayout.actualRemainingDays[1]</span>
                            </div>
                        }
                    </div>
                }
            </ContentTemplate>
        </DashboardLayoutPanel>

    </DashboardLayoutPanels>
</SfDashboardLayout>

<ControlPanelModal @ref=controlPanelModal1 inputNumber0="0" inputNumber10="10" inputNumber15="15" inputNumber1100="1100"
    hoisterDownCycleCount="@hoisterDownCycleCount[0]" hoisterDownCycleSettingCount="@hoisterDownCycleSettingCount[0]"
    mBufAValve="@MainLayout.bufAValve[0]" mBufBValve="@MainLayout.bufBValve[0]" mReagValve="@MainLayout.reagValve[0]" mWashingValve="@MainLayout.washingValve[0]"
    aWashingMotion="@MainLayout.hbmWashingMotionControl[0]" aCalMotion="@MainLayout.hbmCalMotionControl[0]"
    preWashingStatus="@MainLayout.d1DeviceStatusIntBinaryCharArray[3]" preCalStatus="@MainLayout.d1DeviceStatusIntBinaryCharArray[4]" stablingStatus="@MainLayout.systemStatusIntBinaryCharArray[10]">
</ControlPanelModal>

<ControlPanelModal @ref=controlPanelModal2 inputNumber0="1" inputNumber10="20" inputNumber15="25" inputNumber1100="2100"
    hoisterDownCycleCount="@hoisterDownCycleCount[1]" hoisterDownCycleSettingCount="@hoisterDownCycleSettingCount[1]"
    mBufAValve="@MainLayout.bufAValve[1]" mBufBValve="@MainLayout.bufBValve[1]" mReagValve="@MainLayout.reagValve[1]" mWashingValve="@MainLayout.washingValve[1]"
    aWashingMotion="@MainLayout.hbmWashingMotionControl[1]" aCalMotion="@MainLayout.hbmCalMotionControl[1]"
    preWashingStatus="@MainLayout.d2DeviceStatusIntBinaryCharArray[3]" preCalStatus="@MainLayout.d2DeviceStatusIntBinaryCharArray[4]" stablingStatus="@MainLayout.systemStatusIntBinaryCharArray[10]">
</ControlPanelModal>
@code {
    SfCircularGauge GaugeOne;
    SfCircularGauge GaugeTwo;
    SfCircularGauge GaugeThree;
    SfCircularGauge GaugeFour;
    SfDashboardLayout DashboardLayout;

    private ControlPanelModal controlPanelModal1;
    private ControlPanelModal controlPanelModal2;

    private int[] hoisterDownCycleSettingCount = new int[2];
    private int[] hoisterDownCycleCount = new int[2];

    private string[] d1ButtonColor { get; set; } = new string[4];
    private string[] d2ButtonColor { get; set; } = new string[4];

    public static List<SchedulerModel>? dataSource { get; set; }

    public static bool historyAlarmActive = false;
    public static bool filterDevicesNumber = false;

    public void ToDeleteAlarmData() => toDeleteAlarmData?.Invoke();
    public static event Action? toDeleteAlarmData;

    public void ShowHistoryAlarmData(bool a, bool b) => showHistoryAlarmData?.Invoke(a, b);
    public static event Action<bool, bool>? showHistoryAlarmData;

    public void NotifyMaintain1Msg() => onMaintain1Msg?.Invoke();
    public static event Action? onMaintain1Msg;

    public void NotifyMaintain2Msg() => onMaintain2Msg?.Invoke();
    public static event Action? onMaintain2Msg;

    private bool ScatterChartChange { get; set; } = false;

    public bool IsInitialRender { get; set; }
    public double[] CellSpacing = { 10, 10 };

    Timer timer = null;

    private static int d1ValveValue, d2ValveValue;

    protected override async Task OnInitializedAsync()
    {
        pageTitleService.Title = "dashboard";
        //      MainLayout.OnLanguageChange += StateHasChanged;
        MainLayout.OnFieldInputChange += StateHasChanged;
        MainLayout.OnFieldValueChange += StateHasChanged;
        devicesDataModel.OnStateChange += Update;
        AlarmDataGrid.toChangeAlarmBtnState += StateHasChanged;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Setting.UserBasicDetail.Role == "Admin" || Setting.UserBasicDetail.Role == "User")
            {
                var result1 = await getAllCalData.UpdateData();
                // if (result1.Item1.IsSuccess == false)
                //     await JS.InvokeVoidAsync("alertMessage", alertMsgs.ErrorAlert(pageTitleService.Title, result1.Item1).Result);

                await Task.Delay(500);

                var result2 = await getSchedule.UpdateData();
                // if (!result2.IsSuccess == false)
                //     await JS.InvokeVoidAsync("alertMessage", alertMsgs.ErrorAlert(pageTitleService.Title, result2).Result);

                await Task.Delay(500);
            }

            Update();
        }
    }

    private async void Update()
    {
        for (int i = 0; i < 2; i++)
        {
            hoisterDownCycleCount[i] = (ushort)devicesDataModel[i, "hoisterDownCycleCount"];
            hoisterDownCycleSettingCount[i] = (ushort)devicesDataModel[i, "hoisterDownCycleSettingCount"];
        }
              
        StateHasChanged();
    }

    public async void Created(Object args)
    {
        await Task.Delay(100);
        IsInitialRender = true;
    }

    public async Task ResizingWindow(ResizeArgs args)
    {
        await Task.Delay(100);
        await DashboardLayout.RefreshAsync();
        await GaugeOne.RefreshAsync();
        await GaugeTwo.RefreshAsync();
        await GaugeThree.RefreshAsync();
        await GaugeFour.RefreshAsync();
    }

    public async Task ResizingHandler(ResizeArgs args)
    {
        if (args.Id == "LayoutOne")
        {
            await Task.Delay(100);
            GaugeOne.RefreshAsync();
        }
        else if (args.Id == "LayoutTwo")
        {
            await Task.Delay(100);
            GaugeTwo.RefreshAsync();
        }
        else if (args.Id == "LayoutThree")
        {
            await Task.Delay(100);
            GaugeThree.RefreshAsync();
        }
        else if (args.Id == "LayoutFour")
        {
            await Task.Delay(100);
            GaugeFour.RefreshAsync();
        }
    }

    private void ShowModal1()
    {
        controlPanelModal1.ShowModal();     
    }

    private void ShowModal2()
    {
        controlPanelModal2.ShowModal();
    }

    void IDisposable.Dispose()
    {
        MainLayout.OnLanguageChange -= StateHasChanged;
        MainLayout.OnFieldInputChange -= StateHasChanged;
        MainLayout.OnFieldValueChange -= StateHasChanged;
        devicesDataModel.OnStateChange -= Update;
        AlarmDataGrid.toChangeAlarmBtnState -= StateHasChanged;
    }
}
