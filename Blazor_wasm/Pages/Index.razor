@page "/dashboard"

@using Syncfusion.Blazor.CircularGauge
@using Syncfusion.Blazor.Layouts
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Navigations
@using Microsoft.AspNetCore.Components.Authorization

@inject IJSRuntime JS
@inject AlertMessages alertMsgs
@inject IDataService dataService
@inject DevicesDataModel devicesDataModel
@inject PageTitleService pageTitleService
@inject GetAllCalData getAllCalData
@inject GetSchedule getSchedule
@inject AuthenticationStateProvider authStateProvider
@inject IStringLocalizer<MyStrings> localizer
@inject NavigationManager NavManager;
@implements IDisposable

<SfDashboardLayout ID="DashBoard" @ref="DashboardLayout" AllowDragging="false" AllowResizing="false" AllowFloating="true" CellSpacing="@CellSpacing" Columns="30">
    <DashboardLayoutEvents Created="Created" ></DashboardLayoutEvents>

    <DashboardLayoutPanels>

        <DashboardLayoutPanel Id="LayoutOne" Row="0" Col="0" SizeX="7" SizeY="8">
            <HeaderTemplate>
                <div>
                    HBM-100D
                    <a style="margin-right:auto">#1</a>
                    <div style="display:flex; text-align:center; align-items:center; position:absolute; top:5px; right:5px; height:30px;">
                        <button class="btn btn-primary" style="padding:0 0 0 0; width:30px;" @onclick="ShowModal1">...</button>
                    </div>
                </div>
            </HeaderTemplate>
            <ContentTemplate>
                @if (IsInitialRender)
                {
                    <div style="height:100%; width:100%;">
                        <SfCircularGauge ID="GaugeOne" @ref="GaugeOne" Width="100%" Height="100%" MoveToCenter="true">
                            <CircularGauge1></CircularGauge1>
                        </SfCircularGauge>
                    </div>

                }
            </ContentTemplate>
        </DashboardLayoutPanel>
        <DashboardLayoutPanel Id="LayoutTwo" Row="0" Col="7" SizeX="7" SizeY="8">
            <HeaderTemplate>
                <div>
                    HBM-100D
                    <a style="margin-right:auto">#2</a>
                    <div style="display:flex; text-align:center; align-items:center; position:absolute; top:5px; right:5px; height:30px;">
                        <button class="btn btn-primary" style="padding:0 0 0 0; width:30px;" @onclick="ShowModal2">...</button>
                    </div>
                </div>
            </HeaderTemplate>
            <ContentTemplate>
                @if (IsInitialRender)
                {
                    <div style="height:100%; width:100%;">
                        <SfCircularGauge ID="GaugeTwo" @ref="GaugeTwo" Width="100%" Height="100%" MoveToCenter="true">
                            <CircularGauge2></CircularGauge2>
                        </SfCircularGauge>
                    </div>                    
                }
            </ContentTemplate>
        </DashboardLayoutPanel>

        <DashboardLayoutPanel Id="LayoutFive" Row="0" Col="14" SizeX="15" SizeY="8">
            <HeaderTemplate>
                <div>
                    @localizer[StringDescriptionModel.dashboard_pH_live_chart]
                    @* <div style="display:flex; text-align:center; align-items:center; position:absolute; top:5px; right:5px;">
                        <button class="btn btn-primary" style="padding:0 5px 0 5px; " @onclick="@(async()=> await dataService.DeletepH())">@localizer[StringDescriptionModel.dashboard_clear]</button>
                    </div> *@
                </div>
            </HeaderTemplate>
            <ContentTemplate>
                @if (IsInitialRender)
                {
                    <StreamingChart></StreamingChart>
                }
            </ContentTemplate>
        </DashboardLayoutPanel>
        <DashboardLayoutPanel Id="LayoutSix" Row="8" Col="14" SizeX="15" SizeY="8">
            <HeaderTemplate>
                <div>
                    @localizer[StringDescriptionModel.dashboard_alarm_datalog]
                    @* <div style="display:flex; text-align:center; align-items:center; position:absolute; top:5px; right:5px;">
                        <button class="btn btn-primary" style="padding:0 5px 0 5px; " @onclick="ToDeleteAlarmData">@localizer[StringDescriptionModel.dashboard_clear]</button>
                    </div>   *@    

                    <div style="display:flex; text-align:center; align-items:center; position:absolute; top:5px; right:10px; height:30px; gap: 10px;">
                        <button class="btn btn-primary" style="padding:0 5px 0 5px; " onclick="@(()=> {filterDevicesNumber = !filterDevicesNumber; ShowHistoryAlarmData(historyAlarmActive, filterDevicesNumber);})">@localizer[StringDescriptionModel.dashboard_filter_number]</button>

                        @{
                            if (historyAlarmActive)
                            {
                                <div style="display:flex; text-align:center; align-items:center; top:5px;  height:30px;">
                                    <button class="btn btn-primary"  onclick="@(()=> { ShowHistoryAlarmData(false, filterDevicesNumber); historyAlarmActive = false;})">@localizer[StringDescriptionModel.show_inalarm]</button>
                                </div>
                            }
                            else
                            {
                                <div style="display:flex; text-align:center; align-items:center; top:5px;  height:30px;">
                                    <button class="btn btn-primary"  onclick="@(()=> { ShowHistoryAlarmData(true, filterDevicesNumber); historyAlarmActive = true;})">@localizer[StringDescriptionModel.show_history_alarm]</button>
                                </div>
                            }
                        }
                    </div>                 
                </div>
            </HeaderTemplate>
            <ContentTemplate>
                @if (IsInitialRender)
                {
                    <AlarmDataGrid></AlarmDataGrid>
                }
            </ContentTemplate>
        </DashboardLayoutPanel>

        <DashboardLayoutPanel Id="LayoutSeven" Row="8" Col="0" SizeX="7" SizeY="8">
            <HeaderTemplate><div> @localizer[StringDescriptionModel.dashboard_elec_life] System#1 </div></HeaderTemplate>
            <ContentTemplate>

                @if (IsInitialRender && MainLayout.fieldData != null)
                {
                    <div style="
                        position: absolute;
                        top: 40px;
                        left: 10px;
                        font-size: calc(10px + 0.5vw);
                        color: #333;
                        white-space: nowrap;
                        z-index: 1000;
                    ">            
                        @MainLayout.fieldData.Field - 220                                      
                    </div>
                    <div style="width:100%; height:100%;" onmousedown="@(()=>NotifyMaintain1Msg())">
                        <SfCircularGauge ID="GaugeThree" @ref="GaugeThree" Width="100%" Height="100%" MoveToCenter="true">
                            <CircularGaugeLife1></CircularGaugeLife1>
                        </SfCircularGauge>
                    </div>
                    <div style="position: absolute;
                        bottom: 10px;
                        left: 50%;
                        transform: translateX(-50%);
                        font-size: calc(12px + 0.5vw);
                        color: #333;
                        white-space: nowrap;
                        z-index: 1000;">
                        @if (Setting.UserBasicDetail.Role == "Admin")
                        {
                            @*  <div>
                                <label>±Ò¥Î¤é´Á¡G</label>
                                <input type="date" @bind="startDate" />
                            </div>  *@
                            <div>
                                <label>@localizer[StringDescriptionModel.dashboard_remaindays]:</label>
                                <span>@MainLayout.actualRemainingDays[0]</span>
                            </div>
                        }
                        else
                        {                        
                            <div>
                                <label>@localizer[StringDescriptionModel.dashboard_remaindays]:</label>
                                <span>@MainLayout.actualRemainingDays[0]</span>
                            </div>
                        }
                    </div>
                }
            </ContentTemplate>
        </DashboardLayoutPanel>
        <DashboardLayoutPanel Id="LayoutEight" Row="8" Col="7" SizeX="7" SizeY="8">
            <HeaderTemplate><div> @localizer[StringDescriptionModel.dashboard_elec_life] System#2 </div></HeaderTemplate>
            <ContentTemplate>
                @if (IsInitialRender && MainLayout.fieldData != null)
                {
                    <div style="
                        position: absolute;
                        top: 40px;
                        left: 10px;
                        font-size: calc(10px + 0.5vw);
                        color: #333;
                        white-space: nowrap;
                        z-index: 1000;
                    ">
                        @MainLayout.fieldData.Field - 220
                    </div>
                    <div style="width:100%; height:100%;" onmousedown="@(()=>NotifyMaintain2Msg())">
                        <SfCircularGauge ID="GaugeFour" @ref="GaugeFour" Width="100%" Height="100%" MoveToCenter="true">
                            <CircularGaugeLife2></CircularGaugeLife2>
                        </SfCircularGauge>
                    </div>
                    <div style="position: absolute;
                        bottom: 10px;
                        left: 50%;
                        transform: translateX(-50%);
                        font-size: calc(12px + 0.5vw);
                        color: #333;
                        white-space: nowrap;
                        z-index: 1000;">
                        @if (Setting.UserBasicDetail.Role == "Admin")
                        {
                            @*          <div>
                                <label>±Ò¥Î¤é´Á¡G</label>
                                <input type="date" @bind="startDate" />
                            </div>  *@
                            <div>
                                <label>@localizer[StringDescriptionModel.dashboard_remaindays]:</label>
                                <span>@MainLayout.actualRemainingDays[1]</span>
                            </div>
                        }
                        else
                        {
                            <div>
                                <label>@localizer[StringDescriptionModel.dashboard_remaindays]:</label>
                                <span>@MainLayout.actualRemainingDays[1]</span>
                            </div>
                        }
                    </div>
                }
            </ContentTemplate>
        </DashboardLayoutPanel>

    </DashboardLayoutPanels>
</SfDashboardLayout>

<Modal @ref="modalRef1">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>HBM-100D #1</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <SfCard>
                    <CardContent>
                        <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 2rem;">
                            @foreach (var (label, key) in HbmReadings)
                            {
                                <div class="d-flex flex-column gap-2 text-center" style="font-size: 30px; ">
                                    <label class="text-primary">@label:</label>
                                    <span class="">@devicesDataModel[0, key]</span>
                                </div>
                            }
                        </div>

                        @if (Expand)
                        {
                            <hr />
                            <div style="display: flex; flex-direction: row; justify-content: space-evenly; gap: 2rem;">
                                <!-- ³Ì¥ªÃä -->
                                <div class="d-flex flex-column align-items-center" style="min-width:120px; gap:10px;">
                                    <div style="font-size: 16px" class="text-nowrap">
                                        @localizer[StringDescriptionModel.current_position]: <span>@hoisterDownCycleCount[0]</span>
                                    </div>
                                    <div style="font-size: 16px" class="text-nowrap">@localizer[StringDescriptionModel.set_position]:</div>
                                    <input min="0" max="10" type="number"
                                        class="form-control text-center"
                                        style="border-radius:8px; width:80px; height:40px; font-size:1.5rem;"
                                        value="@hoisterDownCycleSettingCount[0]"
                                        @onkeydown="@(e => HandleKeyDown(e))"
                                        @onchange="@(async(e)=> await UpdateNumber(15, e))" />
                                    <button class="btn btn-outline-primary" style="width: 80px; height:50px; font-size: 14px;"
                                        onclick="@(()=> WriteToRegister(1100, 64))">
                                            Up
                                    </button>
                                    <button class="btn btn-outline-primary" style="width: 80px; height:50px; font-size: 14px;"
                                        onclick="@(()=> WriteToRegister(1100, 128))">
                                            Down
                                    </button>
                                    <!-- cylinder «ö¶s -->
                                    <button class="btn btn-outline-primary"
                                        style="width: 80px; height:50px; font-size: 14px;"
                                        @onclick="@(async () => WriteToRegister(1100, 16))">
                                            @localizer[StringDescriptionModel.modal_gateway]
                                    </button>
                                    <!-- go to original «ö¶s -->
                                    <button class="btn btn-outline-primary"
                                        style="width: 85px; height:50px; font-size: 14px;"
                                        @onclick="@(async() => WriteToRegister(1100, 1024))">
                                            @localizer[StringDescriptionModel.modal_cable_organizer]
                                    </button>
                                </div>

                                <!-- ¤¤¶¡ -->
                                <table style="width:100%; border-collapse: collapse; border: none;">
                                    <tr>
                                        @if (MainLayout.systemStatusIntBinaryCharArray[0] == '0')
                                        {
                                            isManual = false;                                          
                                        }
                                        else{
                                            isManual = true;
                                        }
                                        <td style="text-align: center;" colspan="2">
                                            <SfSwitch @bind-Checked="isManual" style="border-radius:20px" CssClass="handle-text" TChecked="bool" 
                                                      ValueChange="OnManualSwitchChanged" />
                                        </td>                                      
                                    </tr>
                                    <tr>
                                        <!-- ²Ä¤G¦æ¡A²Ä¤@­Ó©M²Ä¤G­Ó«ö¶s -->
                                        <td style="text-align: center;">
                                            <button class="btn btn-outline-success rounded-pill"
                                                    style="width:120px; height:50px; font-size: 14px; background-color:@MainLayout.bufAValve[0]"
                                                    disabled="@isManual"
                                                    @onclick="@(async () => WriteToRegister(1100, 1))">
                                                @localizer[StringDescriptionModel.modal_m_bufa]
                                            </button>
                                        </td>
                                        <td style="text-align: center;">
                                            <button class="btn btn-primary rounded-pill"
                                                    style="width:120px; height:50px; font-size: 14px; background-color:@MainLayout.hbmWashingMotionControl[0]"
                                                    disabled="@(!isManual)"
                                                    @onclick="@(async () => WriteToRegister(10, 1))">
                                                @localizer[StringDescriptionModel.modal_a_wash]
                                            </button>
                                        </td>
                                    </tr>
                                    <tr>
                                        <!-- ²Ä¤T¦æ¡A²Ä¤T­Ó©M²Ä¥|­Ó«ö¶s -->
                                        <td style="text-align: center;">
                                            <button class="btn btn-outline-success rounded-pill"
                                                    style="width:120px; height:50px; font-size: 14px; background-color:@MainLayout.bufBValve[0]"
                                                    disabled="@isManual"
                                                    @onclick="@(async () => WriteToRegister(1100, 2))">
                                                @localizer[StringDescriptionModel.modal_m_bufb]
                                            </button>
                                        </td>
                                        <td style="text-align: center;">
                                            <button class="btn btn-success rounded-pill"
                                                    style="width:120px; height:50px; font-size: 14px; background-color:@MainLayout.hbmCalMotionControl[0]"
                                                    disabled="@(!isManual)"
                                                    @onclick="@(async () => WriteToRegister(10, 2))">
                                                @localizer[StringDescriptionModel.modal_a_cal]
                                            </button>
                                        </td>
                                    </tr>
                                    <tr>
                                        <!-- ²Ä¥|¦æ¡A²Ä¤­­Ó©M²Ä¤»­Ó«ö¶s -->
                                        <td style="text-align: center;">
                                            <button class="btn btn-outline-success rounded-pill"
                                                    style="width:120px; height:50px; font-size: 14px; background-color:@MainLayout.reagValve[0]"
                                                    disabled="@isManual"
                                                    @onclick="@(async () => WriteToRegister(1100, 4))">
                                                @localizer[StringDescriptionModel.modal_m_reag]
                                            </button>
                                        </td>
                                        <td style="text-align: center;">
                                            <button class="btn btn-danger rounded-pill"
                                                    style="width:120px; height:50px; font-size: 14px;"
                                                    disabled="@(!isManual)"
                                                    @onclick="@(async () => WriteToRegister(10, 4))"
                                                    onmousedown="this.classList.remove('btn-danger'); this.classList.add('btn-outline-danger');"
                                                    onmouseup="this.classList.remove('btn-outline-danger'); this.classList.add('btn-danger');">
                                                @localizer[StringDescriptionModel.modal_stop]
                                            </button>
                                        </td>
                                    </tr>
                                    <tr>
                                        <!-- ²Ä¤­¦æ¡Am.wash «ö¶s -->
                                        <td colspan="2" style="text-align: center;">
                                            <button class="btn btn-outline-success rounded-pill"
                                                    style="width:120px; height:50px; font-size: 14px; background-color:@MainLayout.washingValve[0]"
                                                    disabled="@isManual"
                                                    @onclick="@(async () => WriteToRegister(1100, 8))">
                                                @localizer[StringDescriptionModel.modal_m_wash]
                                            </button>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                        }
                    </CardContent>
                    <CardContent EnableSeparator="true"></CardContent>
                    @if(Setting.UserBasicDetail.Role == "Admin")
                    {
                        <Syncfusion.Blazor.Cards.CardFooter>
                            <CardFooterContent>
                                <SfButton CssClass="e-outline" @onclick="@ExpandHandler">@(Expand ? "Collapse" : "Expand")</SfButton>
                            </CardFooterContent>
                        </Syncfusion.Blazor.Cards.CardFooter>
                    }                  
                </SfCard>
            </Field>
        </ModalBody>
    </ModalContent>
</Modal>

<Modal @ref="modalRef2">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>HBM-100D #2</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <SfCard>
                    <CardContent>
                        <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 2rem;">
                            @foreach (var (label, key) in HbmReadings)
                            {
                                <div class="d-flex flex-column gap-2 text-center" style="font-size: 30px; ">
                                    <label class="text-primary">@label:</label>
                                    <span class="">@devicesDataModel[1, key]</span>
                                </div>
                            }
                        </div>

                        @if (Expand)
                        {
                            <hr />
                            <div style="display: flex; flex-direction: row; justify-content: space-evenly; gap: 2rem;">
                                <!-- ³Ì¥ªÃä -->
                                <div class="d-flex flex-column align-items-center" style="min-width:120px; gap:10px;">
                                    <div style="font-size: 16px" class="text-nowrap">
                                        @localizer[StringDescriptionModel.current_position]: <span>@hoisterDownCycleCount[1]</span>
                                    </div>
                                    <div style="font-size: 16px" class="text-nowrap">@localizer[StringDescriptionModel.set_position]:</div>
                                    <input min="0" max="10" type="number"
                                           class="form-control text-center"
                                           style="border-radius:8px; width:80px; height:40px; font-size:1.5rem;"
                                           value="@hoisterDownCycleSettingCount[1]"
                                           @onkeydown="@(e => HandleKeyDown(e))"
                                           @onchange="@(async(e)=> await UpdateNumber(25, e))" />
                                    <button class="btn btn-outline-primary" style="width: 80px; height:50px; font-size: 14px;"
                                            onclick="@(()=> WriteToRegister(2100, 64))">
                                        Up
                                    </button>
                                    <button class="btn btn-outline-primary" style="width: 80px; height:50px; font-size: 14px;"
                                            onclick="@(()=> WriteToRegister(2100, 128))">
                                        Down
                                    </button>
                                    <!-- cylinder «ö¶s -->
                                    <button class="btn btn-outline-primary"
                                            style="width: 80px; height:50px; font-size: 14px;"
                                            @onclick="@(async () => WriteToRegister(2100, 16))">
                                        @localizer[StringDescriptionModel.modal_gateway]
                                    </button>
                                    <!-- go to original «ö¶s -->
                                    <button class="btn btn-outline-primary"
                                            style="width: 85px; height:50px; font-size: 14px;"
                                            @onclick="@(async() => WriteToRegister(2100, 1024))">
                                        @localizer[StringDescriptionModel.modal_cable_organizer]
                                    </button>
                                </div>

                                <!-- ¤¤¶¡ -->
                                <table style="width:100%; border-collapse: collapse; border: none;">
                                    <tr>
                                        @if (MainLayout.systemStatusIntBinaryCharArray[0] == '0')
                                        {
                                            isManual = false;
                                        }
                                        else
                                        {
                                            isManual = true;
                                        }
                                        <td style="text-align: center;" colspan="2">
                                            <SfSwitch @bind-Checked="isManual" style="border-radius:20px" CssClass="handle-text" TChecked="bool"
                                                      ValueChange="OnManualSwitchChanged" />
                                        </td>
                                    </tr>
                                    <tr>
                                        <!-- ²Ä¤G¦æ¡A²Ä¤@­Ó©M²Ä¤G­Ó«ö¶s -->
                                        <td style="text-align: center;">
                                            <button class="btn btn-outline-success rounded-pill"
                                                    style="width:120px; height:50px; font-size: 14px; background-color:@MainLayout.bufAValve[1]"
                                                    disabled="@isManual"
                                                    @onclick="@(async () => WriteToRegister(2100, 1))">
                                                @localizer[StringDescriptionModel.modal_m_bufa]
                                            </button>
                                        </td>
                                        <td style="text-align: center;">
                                            <button class="btn btn-primary rounded-pill"
                                                    style="width:120px; height:50px; font-size: 14px; background-color:@MainLayout.hbmWashingMotionControl[1]"
                                                    disabled="@(!isManual)"
                                                    @onclick="@(async () => WriteToRegister(20, 1))">
                                                @localizer[StringDescriptionModel.modal_a_wash]
                                            </button>
                                        </td>
                                    </tr>
                                    <tr>
                                        <!-- ²Ä¤T¦æ¡A²Ä¤T­Ó©M²Ä¥|­Ó«ö¶s -->
                                        <td style="text-align: center;">
                                            <button class="btn btn-outline-success rounded-pill"
                                                    style="width:120px; height:50px; font-size: 14px; background-color:@MainLayout.bufBValve[1]"
                                                    disabled="@isManual"
                                                    @onclick="@(async () => WriteToRegister(2100, 2))">
                                                @localizer[StringDescriptionModel.modal_m_bufb]
                                            </button>
                                        </td>
                                        <td style="text-align: center;">
                                            <button class="btn btn-success rounded-pill"
                                                    style="width:120px; height:50px; font-size: 14px; background-color:@MainLayout.hbmCalMotionControl[1]"
                                                    disabled="@(!isManual)"
                                                    @onclick="@(async () => WriteToRegister(20, 2))">
                                                @localizer[StringDescriptionModel.modal_a_cal]
                                            </button>
                                        </td>
                                    </tr>
                                    <tr>
                                        <!-- ²Ä¥|¦æ¡A²Ä¤­­Ó©M²Ä¤»­Ó«ö¶s -->
                                        <td style="text-align: center;">
                                            <button class="btn btn-outline-success rounded-pill"
                                                    style="width:120px; height:50px; font-size: 14px; background-color:@MainLayout.reagValve[1]"
                                                    disabled="@isManual"
                                                    @onclick="@(async () => WriteToRegister(2100, 4))">
                                                @localizer[StringDescriptionModel.modal_m_reag]
                                            </button>
                                        </td>
                                        <td style="text-align: center;">
                                            <button class="btn btn-danger rounded-pill"
                                                    style="width:120px; height:50px; font-size: 14px;"
                                                    disabled="@(!isManual)"
                                                    @onclick="@(async () => WriteToRegister(20, 4))"
                                                    onmousedown="this.classList.remove('btn-danger'); this.classList.add('btn-outline-danger');"
                                                    onmouseup="this.classList.remove('btn-outline-danger'); this.classList.add('btn-danger');">
                                                @localizer[StringDescriptionModel.modal_stop]
                                            </button>
                                        </td>
                                    </tr>
                                    <tr>
                                        <!-- ²Ä¤­¦æ¡Am.wash «ö¶s -->
                                        <td colspan="2" style="text-align: center;">
                                            <button class="btn btn-outline-success rounded-pill"
                                                    style="width:120px; height:50px; font-size: 14px; background-color:@MainLayout.washingValve[1]"
                                                    disabled="@isManual"
                                                    @onclick="@(async () => WriteToRegister(2100, 8))">
                                                @localizer[StringDescriptionModel.modal_m_wash]
                                            </button>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                        }
                    </CardContent>
                    <CardContent EnableSeparator="true"></CardContent>
                    @if (Setting.UserBasicDetail.Role == "Admin")
                    {
                        <Syncfusion.Blazor.Cards.CardFooter>
                            <CardFooterContent>
                                <SfButton CssClass="e-outline" @onclick="@ExpandHandler">@(Expand ? "Collapse" : "Expand")</SfButton>
                            </CardFooterContent>
                        </Syncfusion.Blazor.Cards.CardFooter>
                    }
                </SfCard>
            </Field>
        </ModalBody>
    </ModalContent>
</Modal>

<style>
    .e-switch-wrapper.handle-text {
        width: 205px;
        height: 40px;
        left: -16px;        
    }

        .e-switch-wrapper.handle-text .e-switch-handle {
            width: 70px;
            height: 36px;
            left: 2px;
            background-color: #fff;
        }

        .e-switch-wrapper.handle-text .e-switch-inner,
        .e-switch-wrapper.handle-text .e-switch-handle {
            border-radius: 0;
        }

            .e-switch-wrapper.handle-text .e-switch-handle.e-switch-active {
                left: 150px;
            }

            .e-switch-wrapper.handle-text .e-switch-inner.e-switch-active,
            .e-switch-wrapper.handle-text .e-switch-inner.e-switch-active .e-switch-on {
                background-color: #e3165b;
                border-color: #e3165b;
            }

        .e-switch-wrapper.handle-text .e-switch-inner,
        .e-switch-wrapper.handle-text .e-switch-off {
            background-color: #4d841d;
            border-color: #4d841d;
        }

            .e-switch-wrapper.handle-text .e-switch-inner:after,
            .e-switch-wrapper.handle-text .e-switch-inner:before {
                font-size: 20px;
                position: absolute;
                line-height: 21px;
                font-family: "Helvetica", sans-serif;
                z-index: 1;
                height: 100%;
                transition: all 200ms cubic-bezier(0.445, 0.05, 0.55, 0.95);
                top:10px;
            }

            .e-switch-wrapper.handle-text .e-switch-inner:before {
                content: "@localizer[StringDescriptionModel.system_manual]";
                color: #4d841d;
                left: 3px;
            }

            .e-switch-wrapper.handle-text .e-switch-inner:after {
                content: "@localizer[StringDescriptionModel.system_auto]";
                right: 3px;
                color: #4d841d;
            }

            .e-switch-wrapper.handle-text .e-switch-inner.e-switch-active:before {
                color: #e3165b;
            }

            .e-switch-wrapper.handle-text .e-switch-inner.e-switch-active:after {
                color: #e3165b;
            }

        .e-switch-wrapper.handle-text:not(.e-switch-disabled):hover .e-switch-handle:not(.e-switch-active) {
            background-color: #fff;
        }
</style>
@code {
    SfCircularGauge GaugeOne;
    SfCircularGauge GaugeTwo;
    SfCircularGauge GaugeThree;
    SfCircularGauge GaugeFour;
    SfDashboardLayout DashboardLayout;

    private Modal modalRef1;
    private Modal modalRef2;

    private string[] d1ButtonColor { get; set; } = new string[4];
    private string[] d2ButtonColor { get; set; } = new string[4];

    public static List<SchedulerModel>? dataSource { get; set; }

    public static bool historyAlarmActive = false;
    public static bool filterDevicesNumber = false;

    public void ToDeleteAlarmData() => toDeleteAlarmData?.Invoke();
    public static event Action? toDeleteAlarmData;

    public void ShowHistoryAlarmData(bool a, bool b) => showHistoryAlarmData?.Invoke(a, b);
    public static event Action<bool, bool>? showHistoryAlarmData;

    public void NotifyMaintain1Msg() => onMaintain1Msg?.Invoke();
    public static event Action? onMaintain1Msg;

    public void NotifyMaintain2Msg() => onMaintain2Msg?.Invoke();
    public static event Action? onMaintain2Msg;

    private bool ScatterChartChange { get; set; } = false;

    public bool IsInitialRender { get; set; }
    public double[] CellSpacing = { 10, 10 };

    Timer timer = null;

    private bool Expand = false;

    public ElementReference WeekdayElementRef;
    string selectedStep = "step1";

    public static bool waitFeedback;
    public static bool[] d1ToggleInput = new bool[5];
    public static bool[] d2ToggleInput = new bool[5];

    private static int d1ValveValue, d2ValveValue;

    private int[] hoisterDownCycleSettingCount = new int[2];
    private int[] hoisterDownCycleCount = new int[2];

    private static DateTime startDate = new DateTime(2025, 2, 1);

    private (string Label, string Key)[] HbmReadings = new[]
    {
        ("pH", "hbmpH"),
        ("Elec", "hbmElec"),
        ("Temp", "hbmTemp"),
        ("Zero", "hbmZero"),
        ("Slope", "hbmSlope"),
        ("Health", "hbmHealth")
    };

    private bool isManual = true;

    private async Task OnManualSwitchChanged(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        isManual = args.Checked;
        await WriteToRegister(0, 1);
    }


    protected override async Task OnInitializedAsync()
    {
        pageTitleService.Title = "dashboard";
        //      MainLayout.OnLanguageChange += StateHasChanged;
        MainLayout.OnFieldInputChange += StateHasChanged;
        MainLayout.OnFieldValueChange += StateHasChanged;
        devicesDataModel.OnStateChange += Update;
        AlarmDataGrid.toChangeAlarmBtnState += StateHasChanged;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Setting.UserBasicDetail.Role == "Admin" || Setting.UserBasicDetail.Role == "User")
            {
                var result1 = await getAllCalData.UpdateData();
                // if (result1.Item1.IsSuccess == false)
                //     await JS.InvokeVoidAsync("alertMessage", alertMsgs.ErrorAlert(pageTitleService.Title, result1.Item1).Result);

                await Task.Delay(500);

                var result2 = await getSchedule.UpdateData();
                // if (!result2.IsSuccess == false)
                //     await JS.InvokeVoidAsync("alertMessage", alertMsgs.ErrorAlert(pageTitleService.Title, result2).Result);

                await Task.Delay(500);
            }

            Update();
        }
    }

    private async void Update()
    {
        for (int i = 0; i < 2; i++)
        {
            hoisterDownCycleCount[i] = (ushort)devicesDataModel[i, "hoisterDownCycleCount"];
            hoisterDownCycleSettingCount[i] = (ushort)devicesDataModel[i, "hoisterDownCycleSettingCount"];
        }
              
        StateHasChanged();
    }

    public async void Created(Object args)
    {
        await Task.Delay(100);
        IsInitialRender = true;
    }

    public async Task ResizingWindow(ResizeArgs args)
    {
        await Task.Delay(100);
        await DashboardLayout.RefreshAsync();
        await GaugeOne.RefreshAsync();
        await GaugeTwo.RefreshAsync();
        await GaugeThree.RefreshAsync();
        await GaugeFour.RefreshAsync();
    }

    public async Task ResizingHandler(ResizeArgs args)
    {
        if (args.Id == "LayoutOne")
        {
            await Task.Delay(100);
            GaugeOne.RefreshAsync();
        }
        else if (args.Id == "LayoutTwo")
        {
            await Task.Delay(100);
            GaugeTwo.RefreshAsync();
        }
        else if (args.Id == "LayoutThree")
        {
            await Task.Delay(100);
            GaugeThree.RefreshAsync();
        }
        else if (args.Id == "LayoutFour")
        {
            await Task.Delay(100);
            GaugeFour.RefreshAsync();
        }
    }

    private Task ShowModal1()
    {
        return modalRef1.Show();
    }

    private Task HideModal1()
    {
        return modalRef1.Hide();
    }

    private Task ShowModal2()
    {
        return modalRef2.Show();
    }

    private Task HideModal2()
    {
        return modalRef2.Hide();
    }

    public async Task ExpandHandler()
    {
        Expand = !Expand;
        await Task.Delay(2);

        if (Expand)
        {
            if (WeekdayElementRef.Id != null)
            {
                await JS.InvokeVoidAsync("setFocusToElement", WeekdayElementRef);
            }
        }
    }

    private Task OnSelectedStepChanged(string name)
    {
        selectedStep = name;

        return Task.CompletedTask;
    }

    private async Task UpdateNumber(ushort address, Microsoft.AspNetCore.Components.ChangeEventArgs value)
    {
        PostModbusApiModel postModbusApiModel = new PostModbusApiModel();

        postModbusApiModel.startAddress = address;
        postModbusApiModel.value = Convert.ToInt32(value.Value);
        await dataService.PostModbusDevicesData(postModbusApiModel);
        return;
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        bool isDigit = e.Key.Length == 1 && char.IsDigit(e.Key[0]);
        bool isControl = e.Key == "Backspace" ||
                        e.Key == "Delete" ||
                        e.Key == "ArrowLeft" ||
                        e.Key == "ArrowRight" ||
                        e.Key == "Tab";

        if (!isDigit && !isControl) return;
    }

    void IDisposable.Dispose()
    {
        MainLayout.OnLanguageChange -= StateHasChanged;
        MainLayout.OnFieldInputChange -= StateHasChanged;
        MainLayout.OnFieldValueChange -= StateHasChanged;
        devicesDataModel.OnStateChange -= Update;
        AlarmDataGrid.toChangeAlarmBtnState -= StateHasChanged;
    }
}
