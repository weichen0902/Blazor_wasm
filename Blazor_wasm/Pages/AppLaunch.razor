@page "/"
@using System.IdentityModel.Tokens.Jwt

@using Blazor_wasm.Models
@using Blazor_wasm.Models.APIModels
@using Blazor_wasm.Models.AuthModels
@using Blazor_wasm.Authentication

@using Blazored.LocalStorage
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Components.Authorization

@inject IAppService AppService
@inject NavigationManager NavManager;
@inject AuthenticationStateProvider authStateProvider
@inject ILocalStorageService _localStorage

@code {

    protected async override Task OnInitializedAsync()
    {    
        try
        {
            Console.WriteLine("開始讀取LocalStorage...");

            var response = await _localStorage.GetItemAsync<string>(nameof(Setting.UserBasicDetail));

            if (string.IsNullOrWhiteSpace(response))
            {
                Console.WriteLine("LocalStorage沒有資料或是空字串。");
                if (Setting.UserBasicDetail == null)
					Setting.UserBasicDetail = new UserBasicDetail();
            }
            else
            {
                try
                {
                    Setting.UserBasicDetail = JsonConvert.DeserializeObject<UserBasicDetail>(response);
                    Console.WriteLine("反序列化成功。");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"反序列化失敗：{ex.Message}");
                }
            }

            if (Setting.UserBasicDetail.RefreshToken != null)
            {
                var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                await customAuthStateProvider.UpdateAuthenticationState(Setting.UserBasicDetail);
                NavManager.NavigateTo("/dashboard");
            }
            else
            {
                NavManager.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"整個初始化失敗：{ex.Message}");
            NavManager.NavigateTo("/login");
        }
    }
}
