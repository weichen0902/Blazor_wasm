@page "/stepWashingSetting"

@inject IDataService dataService
@inject DevicesDataModel devicesDataModel
@inject TouchKeyboard touchKeyboard
@inject IStringLocalizer<MyStrings> localizer
@implements IDisposable

<h1 class="text-center">@localizer[StringDescriptionModel.washing_step_setting]</h1>

<div class="container-fluid mt-4">
    <div class="row justify-content-center">
        <div class="col-10">
            <div class="d-flex flex-column align-items-center mb-2">
                <h5 class="mb-3">@localizer[StringDescriptionModel.step]1: <span>@localizer[StringDescriptionModel.select_total_steps]</span></h5>
                <h5 class="mb-3">@localizer[StringDescriptionModel.step]: <span>@totalStepsNumber</span></h5>
                <input type="range" 
                    class="form-range"
                    style="width: 200px;"
                    min="0" max="12" step="1"
                    value="@totalStepsNumber"
                    @oninput="@(async(e)=> await UpdateTotalStepsNumber(e))" />
                
                <div class="d-flex justify-content-between" style="width: 200px;">
                    <span class="text-muted small">0</span>
                    <span class="text-muted small">12</span>
                </div>
            </div>

            <div class="card shadow-sm">
                <div class="card-body p-4">
                    <div class="row justify-content-center">
                        <div class="col-4">
                            <h5 class="mb-4">@localizer[StringDescriptionModel.step]2: <span>@localizer[StringDescriptionModel.select_step_and_set_time]</span></h5>
                            <div class="d-flex flex-column gap-2" style="max-height: 400px; overflow-y: auto;">
                                @for (int i = 0; i < @totalStepsNumber; i++)
                                {
                                    var currentIndex = i;
                                    <div class="d-flex align-items-center gap-2" hidden="@hidden[i]">
                                        <button class="btn @(timeSettingDisabled[currentIndex] ? "btn-primary" : "btn-outline-primary") rounded-pill"
                                                style="width: 100px; height: 30px; font-size: 14px; padding: 0;"
                                                @onclick="@(()=> GetSpecifiedState(currentIndex))">
                                            No.@(currentIndex + 1)
                                        </button>
                                        <div class="input-group" style="width: auto;">
                                            <input type="number"
                                                   min="0" max="600" step="1"
                                                   class="form-control @(!timeSettingDisabled[currentIndex] ? "disabled-input" : "")"
                                                   placeholder="輸入秒數"
                                                   style="width: 80px; height: 30px; border-right: none;"
                                                   @onkeydown="@(e => HandleKeyDown(e))"
                                                   @onchange="@(async(e)=> await UpdateTimerNumber(e))"
                                                   value="@stepTime[currentIndex]"
                                                   disabled="@(!timeSettingDisabled[currentIndex])" />
                                            <span class="input-group-text" style="height: 30px; border-left: none;">s</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="col-4">
                            @if (timeSettingDisabled.Any(x => x))
                            {
                                <div class="card border-primary">
                                    <div class="card-header bg-primary text-white">
                                        <h6 class="mb-0">No.@(Array.IndexOf(timeSettingDisabled, true) + 1) @localizer[StringDescriptionModel.step_number_setting]</h6>
                                    </div>
                                    <div class="card-body">
                                        <p class="mb-3">@localizer[StringDescriptionModel.set_cleaning_content]</p>
                                        @{
                                            var labels = new[] { "Wash", "REAG.", "BUF.A", "BUF.B" };
                                            var values = new[] { 1, 2, 4, 8 };
                                        }
                                        @for (int i = 0; i < 4; i++)
                                        {
                                            var index = i;
                                            var value = values[index];
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" 
                                                       @bind="@_checked[index]"
                                                       @onclick="@(async()=> {
                                                           toggleInput[index] = !toggleInput[index];
                                                           if(toggleInput[index]) stepMainNumber += (ushort)value;
                                                           else stepMainNumber -= (ushort)value;
                                                           await UpdateNumber();
                                                       })"
                                                       disabled="@(!motionSettingDisabled)" />
                                                <label class="form-check-label">@labels[index]</label>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    private int selectStepNumber { get; set; }

    private ushort stepMainNumber { get; set; }

    private ushort totalStepsNumber { get; set; }

    private bool[] toggleInput { get; set; } = new bool[8];

    private bool[] _checked { get; set; } = new bool[8];

    private ushort[] stepNumber { get; set; } = new ushort[12];

    private ushort[] stepTime { get; set; } = new ushort[12];

    private string[] color { get; set; } = new string[12];

    private char[] stepMainNumberBinaryCharArray { get; set; } = new char[8];

    private bool[] timeSettingDisabled { get; set; } = new bool[12];

    private bool[] hidden { get; set; } = new bool[12];

    private bool motionSettingDisabled { get; set; }

    protected override void OnInitialized()
    {
    //    MainLayout.OnLanguageChange += StateHasChanged;
        totalStepsNumber = (ushort)devicesDataModel[0, "totalNumberOfSteps"];

        for (int i = 0; i < 12; i++)
        {
            if (i < totalStepsNumber)
                hidden[i] = false;
            else
                hidden[i] = true;

            stepTime[i] = (ushort)devicesDataModel[i, "washingStepTimeSetting"];
            stepNumber[i] = (ushort)devicesDataModel[i, "washingStepSetting"];            
        }           
    }

    private void GetSpecifiedState(int n)
    {
        selectStepNumber = n;

        for (int i = 0; i < 12; i++)
        {
            if (i == selectStepNumber)
            {
                timeSettingDisabled[i] = true;
                color[i] = "red";
                stepMainNumber = stepNumber[i];
            }
            else
            {
                timeSettingDisabled[i] = false;
                color[i] = "default";
            }

            motionSettingDisabled = true;
        }  

        var stepMainNumberBinary = Convert.ToString(stepMainNumber, 2);
        var _stepMainNumberBinaryCharArray = stepMainNumberBinary.ToCharArray();
        Array.Reverse(_stepMainNumberBinaryCharArray);

        for (int j = 0; stepMainNumberBinaryCharArray.Length > j; j++)
        {
            stepMainNumberBinaryCharArray[j] = (_stepMainNumberBinaryCharArray.Length > j) ? _stepMainNumberBinaryCharArray[j] : '0';
            if (stepMainNumberBinaryCharArray[j] > '0')
            {
                _checked[j] = true;
            }
            else
            {
                _checked[j] = false;
                toggleInput[j] = false;
            }
        }
    }

    private async Task UpdateTotalStepsNumber(ChangeEventArgs e)
    {
        if (e.Value == null) return;

        // 移除所有空白字元
        string input = ((string)e.Value).Replace(" ", "").Trim();
        if (string.IsNullOrEmpty(input)) return;
        if (!ushort.TryParse(input, out ushort newValue)) return;
        if (newValue > 12) totalStepsNumber = 12;
        totalStepsNumber = newValue;
      
        PostModbusApiModel postModbusApiModel = new PostModbusApiModel();

        postModbusApiModel.startAddress = 600;
        postModbusApiModel.value = totalStepsNumber;
        await dataService.PostModbusDevicesData(postModbusApiModel);

        for (int i = 0; i < 12; i++)
        {
            if (i < totalStepsNumber)
                hidden[i] = false;
            else
                hidden[i] = true;
        }
    }

    private async Task UpdateTimerNumber(ChangeEventArgs e)
    {

        if (e.Value == null) return;
        // 移除所有空白字元
        string input = ((string)e.Value).Replace(" ", "").Trim();
        if (string.IsNullOrEmpty(input)) return;
        if (!ushort.TryParse(input, out ushort newValue)) return;


        PostModbusApiModel postModbusApiModel = new PostModbusApiModel();

        for (int i = 0; i < 12; i++)
        {          
            if (i == selectStepNumber)
            {
                if (e.Value != null)
                    stepTime[i] = ushort.Parse((string)e.Value);

                postModbusApiModel.startAddress = 501 + i;
                postModbusApiModel.value = stepTime[i];
                await dataService.PostModbusDevicesData(postModbusApiModel);
                return;
            }
        }                 
    }

    private async Task UpdateNumber()
    {
        PostModbusApiModel postModbusApiModel = new PostModbusApiModel();
        for (int i = 0; i < 12; i++)
        {
            if (i == selectStepNumber)
            {
                stepNumber[i] = stepMainNumber;
                postModbusApiModel.startAddress = 101 + i;
                postModbusApiModel.value = stepNumber[i];
                await dataService.PostModbusDevicesData(postModbusApiModel);
                return;
            }            
        }
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        bool isDigit = e.Key.Length == 1 && char.IsDigit(e.Key[0]);
        bool isControl = e.Key == "Backspace" || 
                        e.Key == "Delete" || 
                        e.Key == "ArrowLeft" || 
                        e.Key == "ArrowRight" ||
                        e.Key == "Tab";

        if (!isDigit && !isControl) return;
    }

    void IDisposable.Dispose()
    {
    //    MainLayout.OnLanguageChange -= StateHasChanged;
    }
}
