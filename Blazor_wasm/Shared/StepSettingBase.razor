@inject IDataService dataService
@inject DevicesDataModel devicesDataModel
@inject TouchKeyboard touchKeyboard
@inject IStringLocalizer<MyStrings> localizer

<h1 class="text-center">@Title</h1>

<div class="container-fluid mt-4">
    <div class="row justify-content-center">
        <div class="col-10">
            <div class="d-flex flex-column align-items-center mb-2">
                <h5 class="mb-3">@localizer[StringDescriptionModel.step]1: <span>@localizer[StringDescriptionModel.select_total_steps]</span></h5>
                
                <input type="number"
                    min="0" max="12" step="1"
                    class="form-control text-center"
                    style="width: 200px; height: 38px;"
                    value="@TotalSteps"
                    @onkeydown="@(e => HandleKeyDown(e))"
                    @oninput="@(async(e)=> await UpdateTotalStepsNumber(e))" />
                
                <input type="range" 
                    class="form-range"
                    style="width: 200px;"
                    min="0" max="12" step="1"
                    value="@TotalSteps"
                    @oninput="@(async(e)=> await UpdateTotalStepsNumber(e))" />
                
                <div class="d-flex justify-content-between" style="width: 200px;">
                    <span class="text-muted small">0</span>
                    <span class="text-muted small">12</span>
                </div>
            </div>

            <div class="card shadow-sm">
                <div class="card-body p-4">
                    <div class="row justify-content-center">
                        <div class="col-4">
                            <h5 class="mb-4">@localizer[StringDescriptionModel.step]2: <span>@localizer[StringDescriptionModel.select_step_and_set_time]</span></h5>
                            <div class="d-flex flex-column gap-2" style="max-height: 400px; overflow-y: auto;">
                                @for (int i = 0; i < TotalSteps; i++)
                                {
                                    var currentIndex = i;
                                    <div class="d-flex align-items-center gap-2" hidden="@Hidden[i]">
                                        <button class="btn @(Color[currentIndex] == "red" ? "btn-danger" : "btn-outline-primary") rounded-pill"
                                                style="width: 100px; height: 30px; font-size: 14px; padding: 0;"
                                                @onclick="@(() => GetSpecifiedState(currentIndex))">
                                            No.@(currentIndex + 1)
                                        </button>
                                        <div class="input-group" style="width: auto;">
                                            <input type="number"
                                                   min="0" max="600" step="1"
                                                   class="form-control @(!TimeSettingDisabled[currentIndex] ? "disabled-input" : "")"
                                                   placeholder="輸入秒數"
                                                   style="width: 80px; height: 30px; border-right: none;"
                                                   @onkeydown="@(e => HandleKeyDown(e))"
                                                   @onchange="@(async(e)=> await UpdateTimerNumber(e))"
                                                   value="@StepTime[currentIndex]"
                                                   disabled="@(!TimeSettingDisabled[currentIndex])" />
                                            <span class="input-group-text" style="height: 30px; border-left: none;">s</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="col-4">
                            @if (TimeSettingDisabled.Any(x => x))
                            {
                                <div class="card border-primary">
                                    <div class="card-header bg-primary text-white">
                                        <h6 class="mb-0">No.@(SelectedStep + 1) @localizer[StringDescriptionModel.step_number_setting]</h6>
                                    </div>
                                    <div class="card-body">
                                        <p class="mb-3">@localizer[StringDescriptionModel.set_cleaning_content]</p>
                                        @{
                                            var labels = new[] { "Wash", "REAG.", "BUF.A", "BUF.B" };
                                            var values = new[] { 1, 2, 4, 8 };
                                        }
                                        @for (int i = 0; i < 4; i++)
                                        {
                                            var index = i;
                                            var value = values[index];
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" 
                                                       @bind="@Checked[index]"
                                                       @onclick="@(async () => {
                                                           ToggleInput[index] = !ToggleInput[index];
                                                           if(ToggleInput[index]) StepMainNumber += (ushort)value;
                                                           else StepMainNumber -= (ushort)value;
                                                           await UpdateNumber();
                                                       })"
                                                       disabled="@(!MotionSettingEnabled)" />
                                                <label class="form-check-label">@labels[index]</label>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public ushort BaseRegisterAddress { get; set; }

    private ushort TotalSteps { get; set; }
    private int SelectedStep { get; set; }
    private ushort StepMainNumber { get; set; }
    private bool[] ToggleInput { get; set; } = new bool[8];
    private bool[] Checked { get; set; } = new bool[8];
    private ushort[] StepNumber { get; set; } = new ushort[12];
    private ushort[] StepTime { get; set; } = new ushort[12];
    private bool[] TimeSettingDisabled { get; set; } = new bool[12];
    private bool[] Hidden { get; set; } = new bool[12];
    private bool MotionSettingEnabled { get; set; }
    private char[] StepMainNumberBinaryCharArray { get; set; } = new char[8];
    private string[] Color { get; set; } = new string[12];

    protected override void OnInitialized()
    {
        MainLayout.OnLanguageChange += StateHasChanged;
        
        // 根據不同的基礎地址選擇對應的數據模型
        string timeSettingField = BaseRegisterAddress == 700 ? "calibrationStepTimeSetting" : "washingStepTimeSetting";
        string stepSettingField = BaseRegisterAddress == 700 ? "calibrationStepSetting" : "washingStepSetting";
        
        // 初始化總步驟數
        TotalSteps = (ushort)devicesDataModel[0, timeSettingField];

        // 初始化所有步驟的數據
        for (int i = 0; i < 12; i++)
        {
            Hidden[i] = i >= TotalSteps;
            StepTime[i] = (ushort)devicesDataModel[i, timeSettingField];
            StepNumber[i] = (ushort)devicesDataModel[i, stepSettingField];
            Color[i] = "default";
        }
    }

    private void GetSpecifiedState(int n)
    {
        SelectedStep = n;

        for (int i = 0; i < 12; i++)
        {
            if (i == SelectedStep)
            {
                TimeSettingDisabled[i] = true;
                Color[i] = "red";
                StepMainNumber = StepNumber[i];
            }
            else
            {
                TimeSettingDisabled[i] = false;
                Color[i] = "default";
            }
        }

        MotionSettingEnabled = true;

        var stepMainNumberBinary = Convert.ToString(StepMainNumber, 2);
        var _stepMainNumberBinaryCharArray = stepMainNumberBinary.ToCharArray();
        Array.Reverse(_stepMainNumberBinaryCharArray);

        for (int j = 0; j < StepMainNumberBinaryCharArray.Length; j++)
        {
            StepMainNumberBinaryCharArray[j] = (_stepMainNumberBinaryCharArray.Length > j) ? _stepMainNumberBinaryCharArray[j] : '0';
            Checked[j] = StepMainNumberBinaryCharArray[j] > '0';
            ToggleInput[j] = Checked[j];
        }
    }

    private async Task UpdateTotalStepsNumber(ChangeEventArgs e)
    {
        if (e.Value == null) return;

        string input = ((string)e.Value).Replace(" ", "").Trim();
        if (string.IsNullOrEmpty(input)) return;

        if (!ushort.TryParse(input, out ushort newValue)) return;
        if (newValue > 12) newValue = 12;

        TotalSteps = newValue;

        var postModbusApiModel = new PostModbusApiModel
        {
            startAddress = BaseRegisterAddress,
            value = TotalSteps
        };
        await dataService.PostModbusDevicesData(postModbusApiModel);

        for (int i = 0; i < 12; i++)
        {
            Hidden[i] = i >= TotalSteps;
        }
    }

    private async Task UpdateTimerNumber(ChangeEventArgs e)
    {
        if (e.Value == null) return;

        if (ushort.TryParse((string)e.Value, out ushort newValue))
        {
            if (newValue > 600) newValue = 600;
            StepTime[SelectedStep] = newValue;

            var postModbusApiModel = new PostModbusApiModel
            {
                startAddress = (ushort)(BaseRegisterAddress == 700 ? 700 + SelectedStep : 501 + SelectedStep),
                value = newValue
            };
            await dataService.PostModbusDevicesData(postModbusApiModel);
        }
    }

    private async Task UpdateNumber()
    {
        StepNumber[SelectedStep] = StepMainNumber;
        var postModbusApiModel = new PostModbusApiModel
        {
            startAddress = (ushort)(101 + SelectedStep),
            value = StepNumber[SelectedStep]
        };
        await dataService.PostModbusDevicesData(postModbusApiModel);
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        bool isDigit = e.Key.Length == 1 && char.IsDigit(e.Key[0]);
        bool isControl = e.Key == "Backspace" || 
                        e.Key == "Delete" || 
                        e.Key == "ArrowLeft" || 
                        e.Key == "ArrowRight" ||
                        e.Key == "Tab";

        if (!isDigit && !isControl) return;
    }

    public void Dispose()
    {
        MainLayout.OnLanguageChange -= StateHasChanged;
    }
}
